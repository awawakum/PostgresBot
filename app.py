import os
import handlers
from aiogram import executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, CallbackQuery
from data import config
from handlers.user import menu
from utils.db_api import quick_commands as commands
from keyboards.inline.categories import menu_markup
from loader import dp, bot
import filters
import logging
import asyncio


user_message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
admin_message = '–ê–¥–º–∏–Ω'


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):

    if not await commands.select_user(message.from_user.id):
        await commands.add_user(user_id=message.from_user.id,
                            first_name=message.from_user.first_name,
                            last_name=message.from_user.last_name,
                            username=message.from_user.username,
                            resource='telegram'
                            )
    else:
        logging.info('User is exist')
        
    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    if message.from_user.id in config.ADMINS:
        markup.row(user_message, admin_message)
    else:
        markup = await menu.get_user_menu()

    await message.answer('''üò≥–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏ ?
ü§ë –¢–æ–≥–¥–∞ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –±–æ—Ç
üòé–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è! 
–ï—Å–ª–∏ –≤—ã –ø–æ–ø–∞–ª–∏ –≤ —Ç—è–∂—ë–ª—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –≥–¥–µ –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –¥–æ –ó–ü —Ç–æ –º–∏–ª–æ—Å—Ç–∏ –ø—Ä–æ—Å–∏–º –∫ –Ω–∞–º ü§ó
–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä–æ –∑–∞–π–º–æ–≤ –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –∏ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. üí∏
–ù–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–∞–π—Ç–æ–≤ –µ—Å—Ç—å –∞–∫—Ü–∏—è " –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ –Ω–æ–ª—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤" –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–π —Å–∞–π—Ç—ã, —á—Ç–æ –±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–ª–∞—Ç. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —É–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.‚è≥
  ''', reply_markup=menu_markup())


@dp.callback_query_handler(lambda c: c.data == 'start')
async def process_catalog(query: CallbackQuery):
    await bot.edit_message_text(text='''üò≥–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏ ?
ü§ë –¢–æ–≥–¥–∞ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –±–æ—Ç
üòé–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è! 
–ï—Å–ª–∏ –≤—ã –ø–æ–ø–∞–ª–∏ –≤ —Ç—è–∂—ë–ª—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –≥–¥–µ –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –¥–æ –ó–ü —Ç–æ –º–∏–ª–æ—Å—Ç–∏ –ø—Ä–æ—Å–∏–º –∫ –Ω–∞–º ü§ó
–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä–æ –∑–∞–π–º–æ–≤ –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –∏ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. üí∏
–ù–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–∞–π—Ç–æ–≤ –µ—Å—Ç—å –∞–∫—Ü–∏—è " –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ –Ω–æ–ª—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤" –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–π —Å–∞–π—Ç—ã, —á—Ç–æ –±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–ª–∞—Ç. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —É–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.‚è≥
  ''', message_id=query.message.message_id, chat_id=query.message.chat.id, reply_markup=menu_markup())

@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):
    await handlers.user.menu.user_menu(message)
    await message.answer('–í–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º.')


@dp.message_handler(text=admin_message)
async def admin_mode(message: types.Message):
    cid = message.chat.id
    if cid in config.ADMINS:
        await handlers.user.menu.admin_menu(message)
        await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º.')


async def on_startup(dp):
    filters.setup(dp)

    from utils.db_api.db_gino import on_startup
    logging.info('Connecting PostgreSQL...')

    await on_startup(dp)

    logging.info('DB connected!')

    asyncio.create_task(handlers.admin.notify_users.scheduler())


async def on_shutdown():
    logging.warning("Shutting down..")
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("Bot down")


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    try:
        executor.start_polling(dp, on_startup=on_startup)
    except Exception as e:
        logging.log('Exception: ', e)